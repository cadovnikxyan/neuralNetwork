#include "neuro.h"

Neuro::Neuro()
{

}

Neuro::link_koefs Neuro::LearnNeuroNet(const list<neurons_line>& src_images)
{
    link_koefs result_koefs;
    size_t neurons_count = src_images.front().size();
    result_koefs.resize(neurons_count);

    for (size_t i = 0; i < neurons_count; ++i) {
        result_koefs[i].resize(neurons_count, 0);
    }

    for (size_t i = 0; i < neurons_count; ++i) {
        for (size_t j = 0; j < i ; ++j ) {
            koef_t val = 0;
            val = accumulate(src_images.begin(), src_images.end(), koef_t(0.0), [i, j] (koef_t old_val, const neurons_line &image) -> koef_t{
                return old_val + (image[i] * image[j]);
            });
            result_koefs[i][j] = val;
            result_koefs[j][i] = val;
        }
    }
}




neuro_net_system::neuro_net_system(const Neuro::link_koefs& koefs): _koefs(koefs) {

}

bool neuro_net_system::Execute(Neuro::neurons_line* line) {
    bool value_changed = false;
    Neuro::neurons_line old_values(line->begin(), line->end());
    Neuro::link_koefs::const_iterator it_koefs = _koefs.begin();
    transform(
                line->begin(),
                line->end(),
                line->begin(),
                [&old_values, &it_koefs, &value_changed] ( Neuro::neuron_state old_value) ->  Neuro::neuron_state {
        Neuro::koef_t tmp_val = inner_product(
                                    old_values.begin(),
                                    old_values.end(),
                                    (*it_koefs++).begin(),
                                    Neuro::koef_t(0)
                                    );
        Neuro::neuron_state new_value = (tmp_val > 0 ?  Neuro::UPPER_STATE :  Neuro::LOWER_STATE);
        value_changed = (new_value != old_value) || value_changed;

        return new_value;

    });
    return value_changed;
}



Neuro::neurons_line* neuro_net_system::recognize(Neuro::neurons_line* line) {

    bool need_continue = true;
    _steps_processed = 0;

    while (need_continue) {
        need_continue = Execute(line);
        ++_steps_processed;
    }
    return line;
}


neurons_line_print_descriptor::neurons_line_print_descriptor(const Neuro::neurons_line& line, size_t width, size_t height):
    _line(line), _width(width), _height(height)
{

}

